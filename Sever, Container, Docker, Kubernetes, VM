1. 서버 (Server)
서버는 데이터를 처리하고 네트워크를 통해 클라이언트에게 서비스를 제공하는 컴퓨터 시스템이나 프로그램입니다.

특징:
물리적 서버: 데이터 센터에 위치한 하드웨어 장치.
가상 서버: 물리적 서버의 자원을 나누어 논리적으로 분리한 서버.
역할: 웹 서버(HTTP 요청 처리), 데이터베이스 서버(SQL 요청 처리), 파일 서버(파일 제공).
사용 사례:
사용자 요청 처리(예: 웹사이트 접속).
데이터 저장 및 공유.

2. 컨테이너 (Container)
컨테이너는 애플리케이션과 그 실행 환경(라이브러리, 종속성)을 OS 수준에서 격리하여 실행하는 가볍고 독립적인 실행 환경입니다.

특징:
호스트 OS 공유: 컨테이너는 커널을 공유하며, 별도의 가상화 계층이 필요 없음.
격리성: 각 컨테이너는 서로 독립적.
빠른 실행: 가벼운 구조로 애플리케이션 실행 속도가 빠름.
사용 사례:
애플리케이션 이식성 제공.
테스트 및 배포 환경 통합.

3. 도커 (Docker)
Docker는 컨테이너를 만들고 실행하며 관리하는 플랫폼입니다.

특징:
컨테이너 이미지: 특정 애플리케이션 실행에 필요한 파일과 설정을 포함한 정적인 템플릿.
컨테이너 실행: 이미지를 기반으로 실행 가능한 컨테이너를 생성.
경량화: VM보다 적은 자원으로 실행 가능.
사용 사례:
개발 및 운영 환경 간 일관성 유지.
CI/CD 파이프라인 자동화.

4. 쿠버네티스 (Kubernetes)
쿠버네티스는 컨테이너화된 애플리케이션의 배포, 확장, 관리를 자동화하는 오케스트레이션 도구입니다.

특징:
컨테이너 오케스트레이션: 여러 컨테이너의 실행을 관리.
자동화: 로드 밸런싱, 장애 복구, 스케일링 등의 작업 지원.
구성 요소:
Pod: 컨테이너의 최소 실행 단위.
Node: 컨테이너를 실행하는 물리적/가상 머신.
Master: 클러스터 상태와 작업을 관리.
사용 사례:
대규모 컨테이너 환경에서 관리 자동화.
애플리케이션 스케일링 및 로드 밸런싱.

5. 가상 머신 (VM, Virtual Machine)
VM은 물리적 하드웨어 위에서 하이퍼바이저를 통해 실행되는 독립적인 운영체제입니다.

특징:
완전한 격리: VM 간 완벽히 분리된 환경 제공.
자원 소모: 각 VM은 자체 OS와 자원을 사용하므로 컨테이너보다 무거움.
유연성: 다양한 운영체제를 실행 가능.
사용 사례:
여러 OS 테스트.
격리된 환경에서 애플리케이션 실행.
